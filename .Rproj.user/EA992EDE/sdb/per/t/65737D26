{
    "contents" : "# DANPOS2 post-processing\n\n#------------load libraries------------------\nlibrary(\"GenomicFeatures\")\nlibrary(\"ChIPpeakAnno\")\nlibrary(\"ggplot2\")\nlibrary(\"Gviz\")\nlibrary(\"GenomicRanges\")\nlibrary(\"rtracklayer\")\nlibrary(\"GenomicFeatures\")\n\nsetwd(\"~/Data/Tremethick/EMT/GenomeWide/danpos_analysis/\")\n\n#------------import external functions------------------\nsource(\"~/Development/GeneralPurpose/R/heatmap.3.R\")\n\n#------------create TxDb object of the Canis familiaris 3.1 genome annotation------------\nTxDb.Cfam3.Ensembl <- makeTxDbFromGFF(\"/Volumes/gduserv/Data/Annotations/CanFam3/Canis_familiaris.CanFam3.1.82.chr.gtf\")\nCfam3.genes <- genes(TxDb.Cfam3.Ensembl)\nsave(Cfam3.genes, file = \"Cfam3.genes.rda\")\n\n#------------load DANPOS2 results-----------------------\n# changed 2015-12-14:\n# now using the results from DANPOS2 analysis with default settings\n# (~/Development/JCSMR-Tremethick-Lab/shell_scripts/danpos2_command_lines.sh)\n# previous run seemed to create too large sliding windows, i.e. twice nucleosome size\ndanpos2.results <- read.table(\"~/Data/Tremethick/EMT/GenomeWide/danpos_analysis/TGFb_vs_WT_147bp/result/TGFb_H2AZ-WT_H2AZ.positions.integrative.xls\",\n                              header = T, \n                              as.is = T,\n                              sep = \"\\t\")\n\ngr.danpos2.results <- GRanges(danpos2.results$chr, IRanges(danpos2.results$start, danpos2.results$end), strand = \"*\", danpos2.results[, c(4:23)])\n# TODO:\n# convert .wig files to .bw and import\n#gr.TGFb_H2AZ_ChIP_bgsub_Fnor <- import(\"~/Data/Tremethick/EMT/GenomeWide/danpos_analysis/TGFb_vs_WT_147bp/result/pooled//pooled/TGFb_ChIP.bgsub.Fnor.smooth.bw\") \n#gr.WT_H2AZ_ChIP_bgsub_Fnor <- import(\"~/Data/Tremethick/EMT/GenomeWide/danpos_analysis/TGFb_vs_WT/pooled/WT_ChIP.bgsub.Fnor.smooth.bw\")\n#gr.TGFb_vs_WT_diff <- import(\"~/Data/Tremethick/EMT/GenomeWide/danpos_analysis/TGFb_vs_WT/diff/TGFb_vs_WT.pois_diff.bw\")\n\nheatmap.3(mcols(subsetByOverlaps(gr.danpos2.results, gr.MSigDB.EMT_associated.cfam.tss1500))[,c(\"control_smt_val\", \"treat_smt_val\")])\n\n# create a histogram of the complete data (here log2 transformed)\n df1 <- as(log2(danpos2.results[, c(\"control_smt_val\")] + 0.0001), \"matrix\")\n#df1 <- as((danpos2.results[, c(\"control_smt_val\")]), \"matrix\")\ndf1 <- rbind(df1, as(log2(danpos2.results[, c(\"treat_smt_val\")] + 0.0001), \"matrix\"))\n# df1 <- rbind(df1, as((danpos2.results[, c(\"treat_smt_val\")]), \"matrix\"))\n\ndf1 <- data.frame(df1)\ndf1$var <- c(rep(\"ctrl\", nrow(danpos2.results)), rep(\"treat\", nrow(danpos2.results)))\nhm1 <- ggplot(df1,aes(x=df1, group=var))\nhm1 + geom_histogram(alpha = 0.6, position = \"identity\", aes(y = ..density..)) + geom_density(alpha = 0.4, position = \"identity\", aes(color = var))\n\n# histogram of summit counts of nucleosomes located in TSS+/-1500 of TGFb-induced EMT genes\ndf2 <- as(mcols(subsetByOverlaps(gr.danpos2.results, gr.MSigDB.TGFb_induced_EMT.cfam.tss1500))[,c(\"control_smt_val\", \"treat_smt_val\")], \"data.frame\")\nrownames(df2) <- mcols(subsetByOverlaps(gr.danpos2.results, gr.MSigDB.TGFb_induced_EMT.cfam.tss1500))$row_id\nheatmap.3(as.matrix(log2(df2 + 1)), trace = \"none\")\n\n\n# Using Gviz for visualization of some of the data\ni <- 2\ngr1 <- promoters(gr.mesenchymalMarkers.genes[i], upstream = 10000, downstream = 10000)\ndT.WT <- DataTrack(subsetByOverlaps(gr.WT_H2AZ_ChIP_bgsub_Fnor, gr1), type = \"h\", col = \"black\", name = \"Control\")\ndT.TGFb <- DataTrack(subsetByOverlaps(gr.TGFb_H2AZ_ChIP_bgsub_Fnor, gr1), type = \"h\", col = \"grey\", name = \"TGFb\")\ndT.Diff <- DataTrack(subsetByOverlaps(gr.TGFb_vs_WT_diff, gr1), type = \"h\", col = \"blue\", name = \"Difference [+/- log10p-val]\")\n\nbiomTrack <- BiomartGeneRegionTrack(genome = \"canFam3\", \n                                    chromosome = as(seqlevels(gr1)[i], \"character\"),\n                                    start = as(start(gr1), \"integer\"),\n                                    end = as(end(gr1), \"integer\"),\n                                    name = paste(mcols(gr1)$hgnc_symbol),\n                                    mart = dog)\ngat <- GenomeAxisTrack()\nplotTracks(list(gat, biomTrack, dT.WT, dT.TGFb, dT.Diff))\n\n\n# trying to directly visualize the DANPOS2 resuls from the integrative presentation of data\nDT1 <- DataTrack(subsetByOverlaps(gr.danpos2.results, gr1), data = mcols(subsetByOverlaps(gr.danpos2.results, gr1))$control_smt_val, type = \"l\")\nDT2 <- DataTrack(subsetByOverlaps(gr.danpos2.results, gr1), data = mcols(subsetByOverlaps(gr.danpos2.results, gr1))$treat_smt_val, type = \"l\")\nDT3 <- DataTrack(subsetByOverlaps(gr.danpos2.results, gr1), data = mcols(subsetByOverlaps(gr.danpos2.results, gr1))$smt_log2FC,type = \"l\")\nDT4 <- DataTrack(subsetByOverlaps(gr.danpos2.results, gr1), data = -1 * log10(mcols(subsetByOverlaps(gr.danpos2.results, gr1))$smt_diff_FDR), type = c(\"p\", \"g\"))\n\nmax.y <- max(max(values(DT1)), max(values(DT2)))\ndisplayPars(DT1) <- list(ylim = c(0,max.y))\ndisplayPars(DT2) <- list(ylim = c(0,max.y))\n\n  \nplotTracks(list(gat, biomTrack, DT1, DT2, DT3, DT4), from = start(gr1), to = end(gr1))\n\ndf1 <- as(mcols(subsetByOverlaps(gr.danpos2.results, gr1[1]))$control_smt_val, \"matrix\")\ndf1 <- rbind(df1, as(mcols(subsetByOverlaps(gr.danpos2.results, gr1[1]))$treat_smt_val, \"matrix\"))\ndf1 <- data.frame(df1)\ndf1$var <- c(rep(\"ctrl\", length(subsetByOverlaps(gr.danpos2.results, gr1[1]))), \n             rep(\"treat\", length(subsetByOverlaps(gr.danpos2.results, gr1[1]))))\ndf1$pos <- rep(c(1:length(subsetByOverlaps(gr.danpos2.results, gr1[1]))), 2)\np <- ggplot(df1, aes(x = pos, y = df1 , group = var, colour = var))\n\n#------------prepare annotation data------------------\n# create Canis familiaris TXDB object for peak annotation\nchromInfo <- read.table(\"/Volumes/gduserv/Data/RefGenomes/Canis_familiaris/Ensembl/chromInfo.txt\", header = F, as.is = T, sep = \"\\t\")\ncolnames(chromInfo) <- c(\"chrom\", \"length\")\nTxDb.Cfam3.Ensembl <- makeTxDbFromGFF(\"/Volumes/gduserv/Data/Annotations/CanFam3/Canis_familiaris.CanFam3.1.82.chr.gtf\", \n                                      organism = \"Canis familiaris\", \n                                      chrominfo = chromInfo)\nCfam3.genes <- genes(TxDb.Cfam3.Ensembl)\n\n#------------annotate peaks------------------ \ndanpos2.anno <- annotatePeakInBatch(gr.danpos2.results, AnnotationData = Cfam3.genes)\ndanpos2.anno <- addGeneIDs(annotatedPeak = danpos2.anno, orgAnn = org.Cf.eg.db, feature_id_type = \"ensembl_gene_id\", IDs2Add = c(\"symbol\", \"entrez_id\"))\n\n\n# only consider peaks/nucleosome position upstream or on the annotated TSS\nupTSS <- which(mcols(danpos2.anno)$insideFeature %in% c(\"overlapStart\", \"upstream\"))\ngr.danpos2.upTSS <- danpos2.anno[upTSS]\nhist(mcols(gr.danpos2.upTSS)$smt_diff_FDR)\n# gr.danpos2.upTSS <- gr.danpos2.upTSS[which(mcols(gr.danpos2.upTSS)$smt_diff_FDR < 0.001)]\ngr.danpos2.upTSS.5kb <- gr.danpos2.upTSS[which(mcols(gr.danpos2.upTSS)$distancetoFeature <= 5000)]\n\ndf3 <- as(log2(mcols(gr.danpos2.upTSS)$\"control_smt_val\" + 1), \"matrix\")\ndf3 <- rbind(df3, as(log2(mcols(gr.danpos2.upTSS)$\"treat_smt_val\" + 1), \"matrix\"))\ndf3 <- data.frame(df3)\ndf3$var <- c(rep(\"ctrl\", length(gr.danpos2.upTSS)), rep(\"treat\", length(gr.danpos2.upTSS)))\nhm2 <- ggplot(df3,aes(x=df3, group=var))\nhm2 + geom_histogram(alpha = 0.6, position = \"identity\", group= var)\nhm2 + geom_histogram(alpha = 0.6, position = \"identity\", aes(y = ..density..)) + geom_density(alpha = 0.4, position = \"identity\", aes(color = var))\n\ndf3.1 <- mcols(gr.danpos2.upTSS)[c(\"treat_smt_val\", \"control_smt_val\")]\ndf3.1 <- as.matrix(df3.1)\nheatmap.3(log2(df3.1 + 1), trace = \"none\", cexCol = 0.7)\n\n#------------check GO enrichment of peaks------------------\n# look at control and treatment enriched separately - here for all nucleosome positions [with minimum log2 2-fold change]\n# control results\nGO.danpos2.anno_ctrl_enriched <- getEnrichedGO(danpos2.anno[which(mcols(danpos2.anno)$smt_log2FC < -2)], \n                                               orgAnn = \"org.Cf.eg.db\", \n                                               maxP=0.05, \n                                               multiAdj = F, \n                                               minGOterm = 10, \n                                               multiAdjMethod = \"BH\")\n# collapse results at GO term level\ngo.id1 <- unique(as.character(GO.danpos2.anno_ctrl_enriched[[\"bp\"]]$go.id))\ngo.term1 <- unique(as.character(GO.danpos2.anno_ctrl_enriched[[\"bp\"]]$go.term))\nd1 <- data.frame(GO.danpos2.anno_ctrl_enriched[[\"bp\"]])\nd1$go.id <- as.character(d1$go.id)\np1 <- sapply(go.id1, function(x) {w1 <- which(d1$go.id == x); p1 <- unique(d1[w1, \"pvalue\"])})\nGO.danpos2.anno_ctrl_enriched.BP <- data.frame(cbind(\"go.id\" = as.character(go.id1), \"go.term\" = as.character(go.term1), pvalue = as.vector(p1)))\nGO.danpos2.anno_ctrl_enriched.BP$pvalue <- as.numeric(as.character(GO.danpos2.anno_ctrl_enriched.BP$pvalue))\nGO.danpos2.anno_ctrl_enriched.BP$FDR <- p.adjust(GO.danpos2.anno_ctrl_enriched.BP$pvalue, method = \"fdr\")\n\n# treatment results\nGO.danpos2.anno_treat_enriched <- getEnrichedGO(danpos2.anno[which(mcols(danpos2.anno)$smt_log2FC > 2)],\n                                                orgAnn = \"org.Cf.eg.db\", \n                                                maxP=0.05, \n                                                multiAdj = F, \n                                                minGOterm = 10, \n                                                multiAdjMethod = \"BH\")\n# collapse results at GO term level\ngo.id1 <- unique(as.character(GO.danpos2.anno_treat_enriched[[\"bp\"]]$go.id))\ngo.term1 <- unique(as.character(GO.danpos2.anno_treat_enriched[[\"bp\"]]$go.term))\nd1 <- data.frame(GO.danpos2.anno_treat_enriched[[\"bp\"]])\nd1$go.id <- as.character(d1$go.id)\np1 <- sapply(go.id1, function(x) {w1 <- which(d1$go.id == x); p1 <- unique(d1[w1, \"pvalue\"])})\nGO.danpos2.anno_treat_enriched.BP <- data.frame(cbind(\"go.id\" = as.character(go.id1), \"go.term\" = as.character(go.term1), pvalue = as.vector(p1)))\nGO.danpos2.anno_treat_enriched.BP$pvalue <- as.numeric(as.character(GO.danpos2.anno_treat_enriched.BP$pvalue))\nGO.danpos2.anno_treat_enriched.BP$FDR <- p.adjust(GO.danpos2.anno_treat_enriched.BP$pvalue, method = \"fdr\")\n\n# check enrichment for nucleosome position up to 5kb upstream of TSS\n# control results\nGO.danpos2.ctrl.upTSS.5kb <- getEnrichedGO(gr.danpos2.upTSS.5kb[which(mcols(gr.danpos2.upTSS.5kb)$smt_log2FC < -2)],\n                                           orgAnn = \"org.Cf.eg.db\", \n                                           maxP=0.05, \n                                           multiAdj = F, \n                                           minGOterm = 10, \n                                           multiAdjMethod = \"BH\")\n# collapse results at GO term level\ngo.id1 <- unique(as.character(GO.danpos2.ctrl.upTSS.5kb[[\"bp\"]]$go.id))\ngo.term1 <- unique(as.character(GO.danpos2.ctrl.upTSS.5kb[[\"bp\"]]$go.term))\nd1 <- data.frame(GO.danpos2.ctrl.upTSS.5kb[[\"bp\"]])\nd1$go.id <- as.character(d1$go.id)\np1 <- sapply(go.id1, function(x) {w1 <- which(d1$go.id == x); p1 <- unique(d1[w1, \"pvalue\"])})\nGO.danpos2.ctrl.upTSS.5kb.BP <- data.frame(cbind(\"go.id\" = as.character(go.id1), \"go.term\" = as.character(go.term1), pvalue = as.vector(p1)))\nGO.danpos2.ctrl.upTSS.5kb.BP$pvalue <- as.numeric(as.character(GO.danpos2.ctrl.upTSS.5kb.BP$pvalue))\nGO.danpos2.ctrl.upTSS.5kb.BP$FDR <- p.adjust(GO.danpos2.ctrl.upTSS.5kb.BP$pvalue, method = \"fdr\")\n\n# treatment results\nGO.danpos2.treat.upTSS.5kb <- getEnrichedGO(gr.danpos2.upTSS.5kb[which(mcols(gr.danpos2.upTSS.5kb)$smt_log2FC > 2)],\n                                           orgAnn = \"org.Cf.eg.db\", \n                                           maxP=0.05, \n                                           multiAdj = F, \n                                           minGOterm = 10, \n                                           multiAdjMethod = \"BH\")\n# collapse results at GO term level\ngo.id1 <- unique(as.character(GO.danpos2.treat.upTSS.5kb[[\"bp\"]]$go.id))\ngo.term1 <- unique(as.character(GO.danpos2.treat.upTSS.5kb[[\"bp\"]]$go.term))\nd1 <- data.frame(GO.danpos2.treat.upTSS.5kb[[\"bp\"]])\nd1$go.id <- as.character(d1$go.id)\np1 <- sapply(go.id1, function(x) {w1 <- which(d1$go.id == x); p1 <- unique(d1[w1, \"pvalue\"])})\nGO.danpos2.treat.upTSS.5kb.BP <- data.frame(cbind(\"go.id\" = as.character(go.id1), \"go.term\" = as.character(go.term1), pvalue = as.vector(p1)))\nGO.danpos2.treat.upTSS.5kb.BP$pvalue <- as.numeric(as.character(GO.danpos2.treat.upTSS.5kb.BP$pvalue))\nGO.danpos2.treat.upTSS.5kb.BP$FDR <- p.adjust(GO.danpos2.treat.upTSS.5kb.BP$pvalue, method = \"fdr\")\n\n\n# check for enrichment of REACTOME pathways\nreactome.danpos2.anno_ctrl_enriched <- getEnrichedPATH(danpos2.anno[which(mcols(danpos2.anno)$smt_log2FC < -2)], \n                                                       orgAnn = \"org.Cf.eg.db\", pathAnn = \"reactome.db\", \n                                                       maxP = 0.1, \n                                                       minPATHterm = 10, \n                                                       feature_id_type = \"ensembl_gene_id\")\npath1 <- path1 <- unique(as.character(reactome.danpos2.anno_ctrl_enriched$PATH))\np1 <- sapply(path1, function(x) {w1 <- which(reactome.danpos2.anno_ctrl_enriched$PATH == x); p1 <- unique(reactome.danpos2.anno_ctrl_enriched[w1, \"pvalue\"])})\nreactome.danpos2.anno_ctrl_enriched.pathLevel <- data.frame(pathway = cbind(as.character(path1), pvalue = as.vector(p1)))\nreactome.danpos2.anno_ctrl_enriched.pathLevel$pvalue <- as.numeric(as.character(reactome.danpos2.anno_ctrl_enriched.pathLevel$pathway.pvalue))\nreactome.danpos2.anno_ctrl_enriched.pathLevel$FDR <- p.adjust(reactome.danpos2.anno_ctrl_enriched.pathLevel$pvalue, method = \"fdr\")\n\nreactome.danpos2.anno_treat_enriched <- getEnrichedPATH(danpos2.anno[which(mcols(danpos2.anno)$smt_log2FC > 2)], \n                                                        orgAnn = \"org.Cf.eg.db\", \n                                                        pathAnn = \"reactome.db\", \n                                                        maxP = 0.1, \n                                                        minPATHterm = 10, \n                                                        feature_id_type = \"ensembl_gene_id\")\n\npath1 <- unique(as.character(reactome.danpos2.anno_treat_enriched$PATH))\np1 <- sapply(path1, function(x) {w1 <- which(reactome.danpos2.anno_treat_enriched$PATH == x); p1 <- unique(reactome.danpos2.anno_treat_enriched[w1, \"pvalue\"])})\nreactome.danpos2.anno_treat_enriched.pathLevel <- data.frame(pathway = cbind(as.character(path1), pvalue = as.vector(p1)))\nreactome.danpos2.anno_treat_enriched.pathLevel$pvalue <- as.numeric(as.character(reactome.danpos2.anno_treat_enriched.pathLevel$pathway.pvalue))\nreactome.danpos2.anno_treat_enriched.pathLevel$FDR <- p.adjust(reactome.danpos2.anno_treat_enriched.pathLevel$pvalue, method = \"fdr\")\n\n#------------MSigDB analysis------------------\nseqlevels(danpos2.anno) <- gsub(\"chr\", \"\", seqlevels(danpos2.anno))\ngr1 <- subsetByOverlaps(danpos2.anno, promoters(gr.MSigDB.EMT_associated.cfam, upstream = 500, downstream = 0))\ngr1 <- gr1[which(mcols(gr1)$smt_diff_FDR <= 0.01)]\ngr1.ctrl <- gr1[which(mcols(gr1)$smt_log2FC < 0)]\ngr1.treat <- gr1[which(mcols(gr1)$smt_log2FC > 0)]\n\n# create a histogram of the data (here log2 transformed)\ndf1 <- as(log2(mcols(gr1.ctrl)[, c(\"control_smt_val\")] + 1), \"matrix\")\ndf1 <- rbind(df1, as(log2(mcols(gr1.treat)[, c(\"treat_smt_val\")] + 1), \"matrix\"))\ndf1 <- data.frame(df1)\ndf1$var <- c(rep(paste(\"MDCK - Untreated [N = \", length(gr1.ctrl), \"]\", sep = \"\"), length(gr1.ctrl)), rep(paste(\"MDCK - TGFb-treated [N = \", length(gr1.treat), \"]\", sep = \"\"), length(gr1.treat)))\nhisto1 <- ggplot(df1,aes(x=df1, group=var))\npdf(\"Histogram_H2AZ_nucleosome_500TSS0_EMT_associated_genes_FDR0.01.pdf\", height = 8, width = 8)\nhisto1 + geom_histogram(alpha = 0.6, position = \"identity\", aes(y = ..density..)) + geom_density(alpha = 0.4, position = \"identity\", aes(color = var))\ndev.off()\npdf(\"Boxplot_H2AZ_nucleosome_500TSS0_EMT_associated_genes_FDR0.01.pdf\", height = 8, width = 8)\nhisto1 + geom_boxplot(position = \"identity\", aes(y = df1, x= var)) + labs(title = \"EMT-associated genes\\nH2A.Z containing nucleosomes,\\nsummit value [log2], FDR <= 0.01\", x = \"Sample\", y = \"Summit occupation (BG-subtracted) [log2]\") + scale_y_continuous(limits=c(4, 16))\ndev.off()\n\n# display data in heatmap\ndf1 <- as(mcols(gr1)[,c(\"control_smt_val\", \"treat_smt_val\")], \"data.frame\")\npdf(\"Heatmap_H2AZ_nucleosome_500TSS0_EMT_associated_genes_FDR0.01.pdf\", height = 8, width = 8)\nheatmap1 <- heatmap.3(as.matrix(log2(df1 + 1)), trace = \"none\", cexCol = 0.6, main = \"EMT-associated genes\\nH2A.Z containing nucleosomes,\\nsummit value [log2], FDR <= 0.01\", hclustfun=function(x) hclust(x,method=\"ward.D\"))\ndev.off()\n\n\n# as a \"background\" data set we look at the totallity of genes\ngr2 <- subsetByOverlaps(danpos2.anno, promoters(Cfam3.genes, upstream = 250, downstream = 0))\ngr2 <- gr2[which(mcols(gr2)$smt_diff_FDR <= 0.01)]\ngr2.ctrl <- gr2[which(mcols(gr2)$smt_log2FC < 0)]\ngr2.treat <- gr2[which(mcols(gr2)$smt_log2FC > 0)]\n# create a histogram of the data (here log2 transformed)\ndf2 <- as(log2(mcols(gr2.ctrl)[, c(\"control_smt_val\")] + 1), \"matrix\")\ndf2 <- rbind(df2, as(log2(mcols(gr2.treat)[, c(\"treat_smt_val\")] + 1), \"matrix\"))\ndf2 <- data.frame(df2)\ndf2$var <- c(rep(paste(\"MDCK - Untreated [N = \", length(gr2.ctrl), \"]\", sep = \"\"), length(gr2.ctrl)), rep(paste(\"MDCK - TGFb-treated [N = \", length(gr2.treat), \"]\", sep = \"\"), length(gr2.treat)))\nhisto2 <- ggplot(df2,aes(x=df2, group=var))\npdf(\"Histogram_H2AZ_nucleosome_500TSS0_all_genes_FDR0.01.pdf\", height = 10, width = 10)\nhisto2 + geom_histogram(alpha = 0.6, position = \"identity\", aes(y = ..density..)) + geom_density(alpha = 0.4, position = \"identity\", aes(color = var))\ndev.off()\npdf(\"Boxplot_H2AZ_nucleosome_500TSS0_all_genes_FDR0.01.pdf\", height = 10, width = 10)\nhisto2 + geom_boxplot(position = \"identity\", aes(y = df2, x= var)) + labs(title = \"All genes\\nH2A.Z containing nucleosomes,\\nsummit value [log2], FDR <= 0.01\", x = \"Sample\", y = \"Summit occupation (BG-subtracted) [log2]\") + scale_y_continuous(limits=c(4, 16))\ndev.off()\n\ndf2 <- as(mcols(gr2)[,c(\"control_smt_val\", \"treat_smt_val\")], \"data.frame\")\npdf(\"Heatmap_H2AZ_nucleosome_500TSS0_all_genes_FDR0.01.pdf\", height = 10, width = 10)\nheatmap2 <- heatmap.3(as.matrix(log2(df2 + 1)), trace = \"none\", cexCol = 0.6, main = \"All genes\\nH2A.Z containing nucleosomes,\\nsummit value [log2], FDR <= 0.01\", hclustfun=function(x) hclust(x,method=\"ward.D\"))\ndev.off()\n\n# trying to determine the different clusters, so that we can identify genes with strong differential H2A.Z occupation\nhcrow2 <- as.hclust(heatmap2$rowDendrogram)\nsilhouette2 <- list()\nfor(i in 1:9){\n  silhouette2[[i]] <- silhouette(cutree(hcrow2, k = i+1), daisy(as.matrix(log2(df2 + 1))))\n}\n\npdf(\"shilhouetteHeatAutosome.pdf\",pointsize=10, height=8,width=8)\npar(mfrow=c(3,3))\nfor(i in 1:9)\n  plot(silhouette2[[i]])\ndev.off()\n\nc1 <- as.data.frame(cbind(autok2=cutree(hccol, k = 2),autok3=cutree(hccol, k = 3),autok4=cutree(hccol, k = 4)))\n\n# quick look at qPCR genes\nCfam3.genes[which(Cfam3.genes$gene_id %in% qPCRGenesTab$ensembl_gene_id)]\n\ngr3 <- subsetByOverlaps(danpos2.anno, promoters(Cfam3.genes[which(Cfam3.genes$gene_id %in% qPCRGenesTab$ensembl_gene_id)], upstream = 500, downstream = 0))\ngr3 <- gr3[which(mcols(gr3)$smt_diff_FDR <= 0.01)]\n# create a histogram of the data (here log2 transformed)\ndf3 <- as(log2(mcols(gr3)[, c(\"control_smt_val\")] + 1), \"matrix\")\ndf3 <- rbind(df3, as(log2(mcols(gr3)[, c(\"treat_smt_val\")] + 1), \"matrix\"))\ndf3 <- data.frame(df3)\ndf3$var <- c(rep(paste(\"MDCK - Untreated [N = \", length(gr3), \"]\", sep = \"\"), length(gr3)), rep(paste(\"MDCK - TGFb-treated [N = \", length(gr3), \"]\", sep = \"\"), length(gr3)))\nhisto3 <- ggplot(df3,aes(x=df3, group=var))\npdf(\"Histogram_H2AZ_nucleosome_500TSS0_all_genes_FDR0.01.pdf\", height = 10, width = 10)\nhisto3 + geom_histogram(alpha = 0.6, position = \"identity\", aes(y = ..density..)) + geom_density(alpha = 0.4, position = \"identity\", aes(color = var))\ndev.off()\npdf(\"Boxplot_H2AZ_nucleosome_500TSS0_aPCR_genes_FDR0.01.pdf\", height = 10, width = 10)\nhisto3 + geom_boxplot(position = \"identity\", aes(y = df3, x= var)) + labs(title = \"qPCR genes\\nH2A.Z containing nucleosomes,\\nsummit value [log2], FDR <= 0.01\", x = \"Sample\", y = \"Summit occupation (BG-subtracted) [log2]\") + scale_y_continuous(limits=c(4, 16))\ndev.off()\n\ndf3 <- as(mcols(gr3)[,c(\"control_smt_val\", \"treat_smt_val\")], \"data.frame\")\npdf(\"Heatmap_H2AZ_nucleosome_500TSS0_qPCR_genes_FDR0.01.pdf\", height = 10, width = 10)\nheatmap2 <- heatmap.3(as.matrix(log2(df3 + 1)), trace = \"none\", cexCol = 0.6, main = \"qPCR genes\\nH2A.Z containing nucleosomes,\\nsummit value [log2], FDR <= 0.01\", hclustfun=function(x) hclust(x,method=\"ward.D\"))\ndev.off()\n\n#---------------plotting coverage maps based on DANPOS2 normalized data------------\ngr.TGFb <- subsetByOverlaps(gr.TGFb_H2AZ_ChIP_bgsub_Fnor, gr.which)\ngr.WT <- subsetByOverlaps(gr.WT_H2AZ_ChIP_bgsub_Fnor, gr.which)\n\ndT.TGFb <- DataTrack(subsetByOverlaps(gr.TGFb_H2AZ_ChIP_bgsub_Fnor, gr.which), type = \"histogram\")\ndT.WT <- DataTrack(subsetByOverlaps(gr.WT_H2AZ_ChIP_bgsub_Fnor, gr.which), type = \"histogram\")\ni <- 2\nbiomTrack <- BiomartGeneRegionTrack(genome = \"canFam3\", \n                                    chromosome = as(seqnames(gr.mesenchymalMarkers), \"character\")[i],\n                                    start = as.integer(start(gr.mesenchymalMarkers[i]), \"integer\"),\n                                    end = as.integer(end(gr.mesenchymalMarkers[i]), \"integer\"),\n                                    name = paste(mcols(gr.mesenchymalMarkers[i])$hgnc_symbol, \"transcript\",  mcols(gr.mesenchymalMarkers[i])$ensembl_transcript_id, sep = \" \"),\n                                    mart = dog)\n\naT1 <- AnnotationTrack(gr.mesenchymalMarkers[i])\n\nplotTracks(list(aT1, dT.WT, dT.TGFb))\n\n\n#-----------extracting regions of EMT-associated genes (FDR <= 0.01), treatment > control------------\ngr1 <- subsetByOverlaps(danpos2.anno, promoters(gr.MSigDB.EMT_associated.cfam, upstream = 500, downstream = 0))\ngr1[which(gr1$treat_smt_val > 5 & gr1$control_smt_val <= 1)]\n\n\n",
    "created" : 1450073440079.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1331648740",
    "id" : "65737D26",
    "lastKnownWriteTime" : 1450154514,
    "path" : "~/OneDrive/Development/JCSMR_Genomics/R/TremethickLab/H2AZ_EMT/DANPOS2_post_processing.R",
    "project_path" : "DANPOS2_post_processing.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}