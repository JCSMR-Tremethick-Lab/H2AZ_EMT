axis(2, pos = 0)
axis(1, pos = 0)
mtext("-log10(adjusted p-value)", side = 2)
mtext("log2(FC)", side = 1, line = 2)
abline(h = 1, col = "red", lty = 2)
points(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) > 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) > 1), "adj.P.Val"]), col = "red", pch = 4)
points(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) > 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) > 1), "adj.P.Val"]), col = "red", pch = 16)
plot(qDE.limma.tab$logFC, -log10(qDE.limma.tab$adj.P.Val), axes = F, xlab = "", ylab = "", frame = F, xlim = c(-10,10))
axis(2, pos = 0)
axis(1, pos = 0)
mtext("-log10(adjusted p-value)", side = 2)
mtext("log2(FC)", side = 1, line = 2)
abline(h = 1, col = "red", lty = 2)
points(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) > 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) > 1), "adj.P.Val"]), col = "red", pch = 16)
points(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]), col = "red", pch = 16)
plot(qDE.limma.tab$logFC, -log10(qDE.limma.tab$adj.P.Val), axes = F, xlab = "", ylab = "", frame = F, xlim = c(-10,10))
axis(2, pos = 0)
axis(1, pos = 0)
mtext("-log10(adjusted p-value)", side = 2)
mtext("log2(FC)", side = 1, line = 2)
abline(h = 1, col = "red", lty = 2)
points(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]), col = "red", pch = 16)
?labekl
?label
qDE.limma.tab
textxy(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1, qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "genes" ])
textxy(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]), qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "genes" ]
textxy(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]), qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "genes" ])
text(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]), labels = qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "genes" ])
cex = 0.1)
text(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]),
labels = qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "genes" ],
cex = 0.1)
plot(qDE.limma.tab$logFC, -log10(qDE.limma.tab$adj.P.Val), axes = F, xlab = "", ylab = "", frame = F, xlim = c(-10,10))
axis(2, pos = 0)
axis(1, pos = 0)
mtext("-log10(adjusted p-value)", side = 2)
mtext("log2(FC)", side = 1, line = 2)
abline(h = 1, col = "red", lty = 2)
points(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]), col = "red", pch = 16)
text(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]),
labels = qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "genes" ],
cex = 0.1)
text(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]),
labels = qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "genes" ],
cex = 0.3)
text(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]),
labels = qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "genes" ],
cex = 0.5)
??text
?text
plot(qDE.limma.tab$logFC, -log10(qDE.limma.tab$adj.P.Val), axes = F, xlab = "", ylab = "", frame = F, xlim = c(-10,10))
axis(2, pos = 0)
axis(1, pos = 0)
mtext("-log10(adjusted p-value)", side = 2)
mtext("log2(FC)", side = 1, line = 2)
abline(h = 1, col = "red", lty = 2)
points(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]), col = "red", pch = 16)
text(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]),
labels = qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "genes" ],
cex = 0.5,
pos = 4)
plot(qDE.limma.tab$logFC, -log10(qDE.limma.tab$adj.P.Val), axes = F, xlab = "", ylab = "", frame = F, xlim = c(-10,10))
axis(2, pos = 0)
axis(1, pos = 0)
mtext("-log10(adjusted p-value)", side = 2)
mtext("log2(FC)", side = 1, line = 2)
abline(h = 1, col = "red", lty = 2)
points(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]), col = "red", pch = 16)
text(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]),
labels = qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "genes" ],
cex = 0.5,
pos = 4, offset = 0.3)
plot(qDE.limma.tab$logFC, -log10(qDE.limma.tab$adj.P.Val), axes = F, xlab = "", ylab = "", frame = F, xlim = c(-10,10))
axis(2, pos = 0)
axis(1, pos = 0)
mtext("-log10(adjusted p-value)", side = 2)
mtext("log2(FC)", side = 1, line = 2)
abline(h = 1, col = "red", lty = 2)
points(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]), col = "red", pch = 16)
text(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 2), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 2), "adj.P.Val"]),
labels = qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 2), "genes" ],
cex = 0.5,
pos = 4, offset = 0.3)
plot(qDE.limma.tab$logFC, -log10(qDE.limma.tab$adj.P.Val), axes = F, xlab = "", ylab = "", frame = F, xlim = c(-10,10))
axis(2, pos = 0)
axis(1, pos = 0)
mtext("-log10(adjusted p-value)", side = 2)
mtext("log2(FC)", side = 1, line = 2)
abline(h = 1, col = "red", lty = 2)
points(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]), col = "red", pch = 16)
# only adding labels to genes with adjuste p-value <= 0.01
text(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 2), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 2), "adj.P.Val"]),
labels = qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 2), "genes" ],
cex = 0.7,
pos = 4, offset = 0.3)
?abline
text(1,1.4 "abline")
text(1,1.4, "abline")
text(-4,1.2, "abline")
text(-4,1.2, "> 0.1 adjusted p-value ")
text(-4,1.2, "> 0.1 adjusted p-value ", cex = 0.7)
plot(qDE.limma.tab$logFC, -log10(qDE.limma.tab$adj.P.Val), axes = F, xlab = "", ylab = "", frame = F, xlim = c(-10,10))
axis(2, pos = 0)
axis(1, pos = 0)
mtext("-log10(adjusted p-value)", side = 2)
mtext("log2(FC)", side = 1, line = 2)
abline(h = 1, col = "red", lty = 2)
points(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]), col = "red", pch = 16)
# only adding labels to genes with adjuste p-value <= 0.01
text(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 2), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 2), "adj.P.Val"]),
labels = qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 2), "genes" ],
cex = 0.7,
pos = 4, offset = 0.3)
text(-4,1.2, "> 0.1 adjusted p-value ", cex = 0.7)
plot(qDE.limma.tab$logFC, -log10(qDE.limma.tab$adj.P.Val), axes = F, xlab = "", ylab = "", frame = F, xlim = c(-10,10))
axis(2, pos = 0)
axis(1, pos = 0)
mtext("-log10(adjusted p-value)", side = 2)
mtext("log2(FC)", side = 1, line = 2)
abline(h = 1, col = "red", lty = 2)
points(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 1), "adj.P.Val"]), col = "red", pch = 16)
# only adding labels to genes with adjuste p-value <= 0.01
text(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 2), "logFC"], -log10(qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 2), "adj.P.Val"]),
labels = qDE.limma.tab[which(-log10(qDE.limma.tab$adj.P.Val) >= 2), "genes" ],
cex = 0.7,
pos = 4, offset = 0.3)
text(-4,1.2, "< 0.1 [adjusted p-value]", cex = 0.7)
load("danpos2.anno.rda")
head(danpos2.anno)
source("~/Development/GeneralPurpose/R/heatmap.3.R")
TxDb.Cfam3.Ensembl <- makeTxDbFromGFF("/Volumes/gduserv/Data/Annotations/CanFam3/Canis_familiaris.CanFam3.1.82.chr.gtf")
# DANPOS2 post-processing
#------------load libraries------------------
library("GenomicFeatures")
library("ChIPpeakAnno")
library("ggplot2")
library("Gviz")
library("GenomicRanges")
library("rtracklayer")
library("GenomicFeatures")
TxDb.Cfam3.Ensembl <- makeTxDbFromGFF("/Volumes/gduserv/Data/Annotations/CanFam3/Canis_familiaris.CanFam3.1.82.chr.gtf")
TxDb.Cfam3.Ensembl <- makeTxDbFromGFF("/Volumes/gduserv/Data/Annotations/CanFam3/Canis_familiaris.CanFam3.1.82.chr.gtf")
Cfam3.genes <- genes(TxDb.Cfam3.Ensembl)
danpos2.results <- read.table("~/Data/Tremethick/EMT/GenomeWide/danpos_analysis/TGFb_vs_WT_147bp/result/TGFb_H2AZ-WT_H2AZ.positions.integrative.xls",
header = T,
as.is = T,
sep = "\t")
gr.danpos2.results <- GRanges(danpos2.results$chr, IRanges(danpos2.results$start, danpos2.results$end), strand = "*", danpos2.results[, c(4:23)])
heatmap.3(mcols(subsetByOverlaps(gr.danpos2.results, gr.MSigDB.EMT_associated.cfam.tss1500))[,c("control_smt_val", "treat_smt_val")])
df1 <- as(log2(danpos2.results[, c("control_smt_val")] + 0.0001), "matrix")
df1 <- rbind(df1, as(log2(danpos2.results[, c("treat_smt_val")] + 0.0001), "matrix"))
df1 <- data.frame(df1)
df1$var <- c(rep("ctrl", nrow(danpos2.results)), rep("treat", nrow(danpos2.results)))
hm1 <- ggplot(df1,aes(x=df1, group=var))
hm1 + geom_histogram(alpha = 0.6, position = "identity", aes(y = ..density..)) + geom_density(alpha = 0.4, position = "identity", aes(color = var))
df1 <- as((danpos2.results[, c("control_smt_val")]), "matrix")
df1 <- rbind(df1, as((danpos2.results[, c("treat_smt_val")]), "matrix"))
df1 <- data.frame(df1)
df1$var <- c(rep("ctrl", nrow(danpos2.results)), rep("treat", nrow(danpos2.results)))
hm1 <- ggplot(df1,aes(x=df1, group=var))
hm1 + geom_histogram(alpha = 0.6, position = "identity", aes(y = ..density..)) + geom_density(alpha = 0.4, position = "identity", aes(color = var))
df1 <- as(log2(danpos2.results[, c("control_smt_val")] + 0.0001), "matrix")
#df1 <- as((danpos2.results[, c("control_smt_val")]), "matrix")
df1 <- rbind(df1, as(log2(danpos2.results[, c("treat_smt_val")] + 0.0001), "matrix"))
# df1 <- rbind(df1, as((danpos2.results[, c("treat_smt_val")]), "matrix"))
df1 <- data.frame(df1)
df1$var <- c(rep("ctrl", nrow(danpos2.results)), rep("treat", nrow(danpos2.results)))
hm1 <- ggplot(df1,aes(x=df1, group=var))
hm1 + geom_histogram(alpha = 0.6, position = "identity", aes(y = ..density..)) + geom_density(alpha = 0.4, position = "identity", aes(color = var))
source("https://bioconductor.org/biocLite.R")
biocLite("rGADEM")
require(rGADEM)
library("GenomicFeatures")
library("ChIPpeakAnno")
library("ggplot2")
library("Gviz")
library("GenomicRanges")
library("rtracklayer")
library("GenomicFeatures")
setwd("~/Data/Tremethick/EMT/GenomeWide/danpos_analysis/")
source("~/Development/GeneralPurpose/R/heatmap.3.R")
TxDb.Cfam3.Ensembl <- makeTxDbFromGFF("/Volumes/gduserv/Data/Annotations/CanFam3/Canis_familiaris.CanFam3.1.82.chr.gtf")
TxDb.Cfam3.Ensembl <- makeTxDbFromGFF("/Volumes/gduserv/Data/Annotations/CanFam3/Canis_familiaris.CanFam3.1.82.chr.gtf")
Cfam3.genes <- genes(TxDb.Cfam3.Ensembl)
danpos2.results <- read.table("~/Data/Tremethick/EMT/GenomeWide/danpos_analysis/TGFb_vs_WT_147bp/result/TGFb_H2AZ-WT_H2AZ.positions.integrative.xls",
header = T,
as.is = T,
sep = "\t")
gr.danpos2.results <- GRanges(danpos2.results$chr, IRanges(danpos2.results$start, danpos2.results$end), strand = "*", danpos2.results[, c(4:23)])
save(gr.danpos2.results, file = "gr.danpos2.results.rda")
save(Cfam3.genes, file = "Cfam3.genes.rda")
Cfam3.genes.promoters <- promoters(Cfam3.genes, upstream = 1000, downstream = 500)
dp2.subset <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.promoters)
dp2.dubset
dp2.subset
hist(width(dp2.subset))
summary(width(dp2.subset))
Cfam3.genes.promoters <- promoters(Cfam3.genes, upstream = 500, downstream = 200)
dp2.subset <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.promoters)
summary(width(dp2.subset))
dp2.subset
length(which(dp2.subset$smt_log2FC))
length(which(dp2.subset$smt_log2FC == 0))
length(which(dp2.subset$smt_log2FC < 1 & dp2.subset$smt_log2FC > 1))
summary(dp2.subset$smt_log2FC)
length(which(dp2.subset$smt_log2FC < 1 | dp2.subset$smt_log2FC > 1))
window(Cfam3.genes.promoters[1], 3)
?"window"
??"window"
Cfam3.genes.promoters <- promoters(Cfam3.genes, upstream = 400, downstream = 200)
source("~/Development/JCSMR_Genomics/R/TremethickLab/H2AZ_EMT/calculateCoverage.R")
edit(calculateCoverage())
edit(calculateCoverage
)
unlist(tile(Cfam3.genes.promoters, width = 200))
Cfam3.genes.promoters
24223 * 3
seq(1, 72669, 3)
head(seq(1, 72669, 3))
tail(seq(1, 72669, 3))
Cfam3.genes.tss.up2.nucleosome <- Cfam3.genes.promoters[seq(1, 72669, 3)]
Cfam3.genes.promoters
Cfam3.genes.promoters <- unlist(tile(Cfam3.genes.promoters, width = 200))
Cfam3.genes.tss.up2.nucleosome <- Cfam3.genes.promoters[seq(1, 72669, 3)]
Cfam3.genes.tss.up1.nucleosome <- Cfam3.genes.promoters[seq(2, 72669, 3)]
Cfam3.genes.tss.down1.nucleosome <- Cfam3.genes.promoters[seq(3, 72669, 3)]
Cfam3.genes.tss.down1.nucleosome
Cfam3.genes.tss.up2.nucleosome
dp2.subset.up2 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.up2.nucleosome)
dp2.subset.up1 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.up1.nucleosome)
dp2.subset.down1 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.down1.nucleosome)
dp2.subset.up2
dp2.subset.up1
dp2.subset.down1
genome <- BSgenome.Cfamiliaris.UCSC.canFam3
library(BSgenome.Cfamiliaris.UCSC.canFam3)
genome <- BSgenome.Cfamiliaris.UCSC.canFam3
seqlevels(genome) <- gsub("chr", "", seqlevels(genome))
library(Biostrings)
seqnames(genome)
genome$1
genome$"1"
order(dp2.subset.up2)
sort(dp2.subset.up2)
(dp2.subset.up2)
seqlevels(dp2.subset.up2)
seqlevels(dp2.subset.up2) <- seqnames(genome)
seqlevels(dp2.subset.up2, force = T) <- seqnames(genome)
(dp2.subset.up2)
seqlevels(dp2.subset.up2)
sort(dp2.subset.up2)
seqlevels(gr.danpos2.results)
seqlevels(gr.danpos2.results, force = T) <- seqlevels(genome)
gr.danpos2.results <- sort(gr.danpos2.results)
seqlevels(Cfam3.genes)
dp2.subset.up2 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.up2.nucleosome)
dp2.subset.up1 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.up1.nucleosome)
dp2.subset.down1 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.down1.nucleosome)
Cfam3.genes.tss.up2.nucleosome
seqlevelsCfam3.genes.tss.up2.nucleosome
seqlevels(Cfam3.genes.tss.up2.nucleosome)
seqlevels(gr.danpos2.results)
seqlevels(Cfam3.genes)
length(seqlevels(Cfam3.genes))
seqlevels(Cfam3.genes)[40] <- "MT"
seqlevels(Cfam3.genes)[40] <- "M"
Cfam3.genes.promoters <- promoters(Cfam3.genes, upstream = 400, downstream = 200)
Cfam3.genes.promoters <- unlist(tile(Cfam3.genes.promoters, width = 200))
Cfam3.genes.tss.up2.nucleosome <- Cfam3.genes.promoters[seq(1, 72669, 3)]
Cfam3.genes.tss.up1.nucleosome <- Cfam3.genes.promoters[seq(2, 72669, 3)]
Cfam3.genes.tss.down1.nucleosome <- Cfam3.genes.promoters[seq(3, 72669, 3)]
dp2.subset.up2 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.up2.nucleosome)
dp2.subset.up1 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.up1.nucleosome)
dp2.subset.down1 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.down1.nucleosome)
dp2.subset.up1
genome
BSgenome(genome$"1", dp2.subset.up2)
BSgenomeViews(genome$"1", dp2.subset.up2)
genome <- BSgenome.Cfamiliaris.UCSC.canFam3
seqlevels(genome) <- gsub("chr", "", seqlevels(genome))
BSgenomeViews(genome$"1", dp2.subset.up2)
BSgenomeViews(genome, dp2.subset.up2)
BSgenomeViews(genome, dp2.subset.up2)$dna
DNAStringSet(BSgenomeViews(genome, dp2.subset.up2))
ds1 <-  DNAStringSet(BSgenomeViews(genome, dp2.subset.up2))[1:5000]
ds1
gadem <- GADEM(ds1, verbose = 1)
gadem
gadem@motifList
library(GenomicRanges)
library(rGADEM)
library(BSgenome.Cfamiliaris.UCSC.canFam3)
library(Biostrings)
setwd('~/Data/Tremethick/EMT/GenomeWide/danpos_analysis/')
genome <- BSgenome.Cfamiliaris.UCSC.canFam3
seqlevels(genome) <- gsub("chr", "", seqlevels(genome))
load("gr.danpos2.results.rda")
load("Cfam3.genes.rda")
seqlevels(Cfam3.genes)[40] <- "M"
Cfam3.genes.promoters <- promoters(Cfam3.genes, upstream = 400, downstream = 200)
Cfam3.genes.promoters <- unlist(tile(Cfam3.genes.promoters, width = 200))
Cfam3.genes.tss.up2.nucleosome <- Cfam3.genes.promoters[seq(1, 72669, 3)]
Cfam3.genes.tss.up1.nucleosome <- Cfam3.genes.promoters[seq(2, 72669, 3)]
Cfam3.genes.tss.down1.nucleosome <- Cfam3.genes.promoters[seq(3, 72669, 3)]
dp2.subset.up2 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.up2.nucleosome)
dp2.subset.up1 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.up1.nucleosome)
dp2.subset.down1 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.down1.nucleosome)
load("Cfam3.genes.rda")
Cfam3.genes.promoters <- promoters(Cfam3.genes, upstream = 400, downstream = 200)
Cfam3.genes.promoters <- unlist(tile(Cfam3.genes.promoters, width = 200))
Cfam3.genes.tss.up2.nucleosome <- Cfam3.genes.promoters[seq(1, 72669, 3)]
Cfam3.genes.tss.up1.nucleosome <- Cfam3.genes.promoters[seq(2, 72669, 3)]
Cfam3.genes.tss.down1.nucleosome <- Cfam3.genes.promoters[seq(3, 72669, 3)]
dp2.subset.up2 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.up2.nucleosome)
dp2.subset.up1 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.up1.nucleosome)
dp2.subset.down1 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.down1.nucleosome)
dp2.subset.up2
hist(gr.danpos2.results$control_fuzziness_score)
hist(gr.danpos2.results$treat_fuzziness_score)
d1 <- density(gr.danpos2.results$control_fuzziness_score)
d2 <- density(gr.danpos2.results$treat_fuzziness_score)
plot(d1)
lines(d2, col = "red")
gr.danpos2.results
gr.danpos2.results <- sort(gr.danpos2.results)
gr.danpos2.results
seqlevels(gr.danpos2.results)
seqlevels(genome)
seqlevels(gr.danpos2.results, force = T) <- seqlevels(genome)
seqlevels(genome)
seqlevels(gr.danpos2.results)
load("gr.danpos2.results.rda")
seqlevels(gr.danpos2.results)["MT"]
grep("MT" seqlevels(gr.danpos2.results))
grep("MT", seqlevels(gr.danpos2.results))
seqlevels(gr.danpos2.results)[grep("MT", seqlevels(gr.danpos2.results))] <- "M"
seqlevels(gr.danpos2.results)
seqlevels(gr.danpos2.results) <- seqlevels(genome)
seqlevels(gr.danpos2.results)
gr.danpos2.results <- sort(gr.danpos2.results)
gr.danpos2.results
212287 - 212102
head(width(gr.danpos2.results))
summary(width(gr.danpos2.results))
212202 - 212187
reduce(gr.danpos2.results)
summary(width(reduce(gr.danpos2.results)))
ds1 <-  DNAStringSet(BSgenomeViews(genome, dp2.subset.up2))[1:5000]
dp2.subset.up2 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.up2.nucleosome)
dp2.subset.up1 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.up1.nucleosome)
dp2.subset.down1 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.down1.nucleosome)
load("Cfam3.genes.rda")
seqlevels(Cfam3.genes)[40] <- "M"
seqlevels(Cfam3.genes)[40]
seqlevels(Cfam3.genes)
load("Cfam3.genes.rda")
seqlevels(Cfam3.genes)
seqlevels(genome)
seqlevels(Cfam3.genes)[40] <- "M"
Cfam3.genes.promoters <- promoters(Cfam3.genes, upstream = 400, downstream = 200)
Cfam3.genes.promoters <- unlist(tile(Cfam3.genes.promoters, width = 200))
Cfam3.genes.tss.up2.nucleosome <- Cfam3.genes.promoters[seq(1, 72669, 3)]
Cfam3.genes.tss.up1.nucleosome <- Cfam3.genes.promoters[seq(2, 72669, 3)]
Cfam3.genes.tss.down1.nucleosome <- Cfam3.genes.promoters[seq(3, 72669, 3)]
dp2.subset.up2 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.up2.nucleosome)
dp2.subset.up1 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.up1.nucleosome)
dp2.subset.down1 <- subsetByOverlaps(gr.danpos2.results, Cfam3.genes.tss.down1.nucleosome)
ds1 <-  DNAStringSet(BSgenomeViews(genome, dp2.subset.up2))[1:5000]
ds1
export(ds1, con = "test.fa")
head(unlist(ds1))
head(unlist(ds1)[1:10])
head(unlist(ds1)[[1:10])
head(unlist(ds1)[[1:10]])
??XStringSetIO
library(Biostrings)
XstringSetToFASTArecords(ds1)
??XstringSetToFASTArecords
??writeFASTA
sessionInfo(
)
??Biostrings
writeXStringSet(ds1, "ds1.fa")
ds1 <-  DNAStringSet(BSgenomeViews(genome, dp2.subset.up2))
writeXStringSet(ds1, "ds1.fa")
ds1 <-  DNAStringSet(BSgenomeViews(genome, dp2.subset.up2), use.names = TRUE)
ds1
names(ds1)
dp2.subset.up2
Cfam3.genes.promoters
head(as.character(seqnames(dp2.subset.up2)))
head(paste(as.character(seqnames(dp2.subset.up2)), start(dp2.subset.up2), end(dp2.subset.up2), sep = "_"))
names(ds1) <- paste(as.character(seqnames(dp2.subset.up2)), start(dp2.subset.up2), end(dp2.subset.up2), sep = "_")
writeXStringSet(ds1, "ds1.fa")
ds2 <-  DNAStringSet(BSgenomeViews(genome, dp2.subset.up1), use.names = TRUE)
names(ds2) <- paste(as.character(seqnames(dp2.subset.up1)), start(dp2.subset.up1), end(dp2.subset.up1), sep = "_")
ds3 <-  DNAStringSet(BSgenomeViews(genome, dp2.subset.down1), use.names = TRUE)
names(ds3) <- paste(as.character(seqnames(dp2.subset.down1)), start(dp2.subset.down1), end(dp2.subset.down1), sep = "_")
writeXStringSet(ds3, "ds3.fa")
writeXStringSet(ds2, "ds2.fa")
library(HTqPCR)
library(ggplot2)
source("~/Development/GeneralPurpose/R/limmaCtDataMod.R")
setwd("~/Data/Tremethick/EMT/GenomeWide/danpos_analysis/")
qPCRGeneList <- readLines("../../MDCK qPCR data/genelist.txt")
qPCRGenesTab <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol"), filters = "hgnc_symbol", values = qPCRGeneList, dog)
qPCRGeneList[which(!qPCRGeneList %in% qPCRGenesTab$hgnc_symbol)]
qPCRGeneList.missing <- c("KRT7" = "ENSCAFG00000007307",
"LOC488207" = NULL,
"OCLN" = "ENSCAFG00000007805",
"SIP1" = "ENSCAFG00000013859" ,
"TCF4" = "ENSCAFG00000000140",
"TGFB1" = "ENSCAFG00000005014",
"TMEFF1" = "ENSCAFG00000002577",
"TWIST1" = "ENSCAFG00000012469", #using TWIST2 - TWIST does not seem to exist in dog genome
"LOC478215/H2AZ" = "ENSCAFG00000010615",
"HPRT1" = "ENSCAFG00000018870",
"LDHAL6B" = "ENSCAFG00000009211",
"GAPDH" = "ENSCAFG00000015077"
)
library("gdata")
library("Gviz")
library("rtracklayer")
library("biomaRt")
library("GenomicRanges")
library("GenomicAlignments")
library(BSgenome.Cfamiliaris.UCSC.canFam3)
dog <- useEnsembl(biomart = "ensembl", dataset = "cfamiliaris_gene_ensembl", host = "asia.ensembl.org")
qPCRGenesTab <- getBM(attributes = c("ensembl_gene_id", "hgnc_symbol"), filters = "hgnc_symbol", values = qPCRGeneList, dog)
qPCRGeneList[which(!qPCRGeneList %in% qPCRGenesTab$hgnc_symbol)]
qPCRGeneList.missing <- c("KRT7" = "ENSCAFG00000007307",
"LOC488207" = NULL,
"OCLN" = "ENSCAFG00000007805",
"SIP1" = "ENSCAFG00000013859" ,
"TCF4" = "ENSCAFG00000000140",
"TGFB1" = "ENSCAFG00000005014",
"TMEFF1" = "ENSCAFG00000002577",
"TWIST1" = "ENSCAFG00000012469", #using TWIST2 - TWIST does not seem to exist in dog genome
"LOC478215/H2AZ" = "ENSCAFG00000010615",
"HPRT1" = "ENSCAFG00000018870",
"LDHAL6B" = "ENSCAFG00000009211",
"GAPDH" = "ENSCAFG00000015077"
)
t1<- cbind(rownames(as.data.frame(qPCRGeneList.missing)), qPCRGeneList.missing)
colnames(t1) <- c("hgnc_symbol", "ensembl_gene_id")
t2 <- rbind(qPCRGenesTab, t1[,c("ensembl_gene_id", "hgnc_symbol")])
rownames(t2) <- t2$hgnc_symbol
qPCRGenesTab <- t2
rm(list = c("t1", "t2"))
qPCRGenesTab$type <- "GOI"
qPCRGenes.control <- c("B2M", "GUSB", "HPRT1", "GAPDH", "LDHAL6B")
qPCRGenesTab[qPCRGenes.control,]$type <- "CONTROL"
qPCRData.TGFb_exp1 <- read.csv("../../MDCK qPCR data/TGFb-treatment/20120620 PCR - TGFb-treatment Experiment 1.csv", header = T, row.names = 1, as.is = T)
qPCRData.TGFb_exp2 <- read.csv("../../MDCK qPCR data/TGFb-treatment/20120625 PCR - TGFb-treatment Experiment 2.csv", header = T, row.names = 1, as.is = T)
qPCRData.TGFb <- cbind(qPCRData.TGFb_exp1[, c(1:2)], qPCRData.TGFb_exp2[,c(1:2)], qPCRData.TGFb_exp1[, c(3:4)], qPCRData.TGFb_exp2[,c(3:4)])
colnames(qPCRData.TGFb) <- c(paste("Control_", c(1:4), sep= ""), paste("TGFb_treated_", c(1:4), sep= ""))
lapply(seq_along(1:ncol(qPCRData.TGFb)), function(x) {
Ct <- qPCRData.TGFb[,x]
genes <- rownames(qPCRData.TGFb)
pos <- c(1:nrow(qPCRData.TGFb))
flag <- rep("OK", nrow(qPCRData.TGFb))
type <- c(rep("GOI", 84), rep("HKG", 5))
fn <- paste("../../MDCK qPCR data/TGFb-treatment/", colnames(qPCRData.TGFb)[x], ".csv", sep = "")
print(fn)
tab <- data.frame(cbind(genes, Ct, pos, flag, type ))
write.table(tab, file = fn, row.names = F, col.names = F, sep = "\t")
})
files <- data.frame(ID = 1:ncol(qPCRData.TGFb))
files$Files <- unlist(lapply(seq_along(1:ncol(qPCRData.TGFb)), function(x) { paste(colnames(qPCRData.TGFb)[x], ".csv", sep = "") }))
files$Treatment <- c("Control", "Control", "Control", "Control", "TGFb-treated", "TGFb-treated", "TGFb-treated", "TGFb-treated")
column.info <- list(flag = "flag", Ct = "Ct", feature = "genes", position = "pos", type = "type")
qPCRdata.raw <- readCtData(files$Files,
format = "plain",
path = "../../MDCK qPCR data/TGFb-treatment/",
n.features = 89,
column.info = list(flag = 4, Ct = 2, feature = 1, position = 3, type = 5),
n.data = 1,
header = F)
pData(qPCRdata.raw) <- data.frame(Sample = c("Control", "Control", "Control", "Control", "TGFb-treated", "TGFb-treated", "TGFb-treated", "TGFb-treated"), Replicate = rep(1:4,2 ))
g <- featureNames(qPCRdata.raw)[1:10]
g <- c("TGFB1", "MMP9", "CDH1")
plotCtOverview(qPCRdata.raw, calibrator = "Control", genes = g, conf.int = T, ylim = c(0, 2), groups = c("Control", "Control", "Control", "Control", "TGFb-treated", "TGFb-treated", "TGFb-treated", "TGFb-treated"))
sr.norm <- normalizeCtData(qPCRdata.raw, norm = "scale.rank")
q.norm <- normalizeCtData(qPCRdata.raw, norm = "quantile")
dCT.norm <- normalizeCtData(qPCRdata.raw, norm = "deltaCt", deltaCt.genes = rownames(qPCRdata.raw)[85:89], verbose = T)
plotCtBoxes(sr.norm, stratify = "type")
plotCtBoxes(dCT.norm, stratify = "type")
plotCtBoxes(q.norm, stratify = "type")
plotCtScatter(sr.norm, cards = c(1,2), col = "type", diag = T)
plotCtPCA(qPCRdata.raw, features = F)
groups <- as.factor(c("Control", "Control", "Control", "Control", "TGFb-treated", "TGFb-treated", "TGFb-treated", "TGFb-treated"))
qDE.ttest <- ttestCtData(dCT.norm, groups = groups)
qDE.ttest$genes <- as(qDE.ttest$genes, "character")
qDE.ttest$ensembl_gene_id <- qPCRGenesTab[qDE.ttest$genes, "ensembl_gene_id"]
qDE.ttest <- qDE.ttest[- which(is.na(qDE.ttest$ensembl_gene_id)), ]
rownames(qDE.ttest) <- qDE.ttest$ensembl_gene_id
design <- model.matrix(~0 + files$Treatment)
colnames(design) <- c("Control","Treatment")
contrasts <- makeContrasts(Control - Treatment, levels = design)
dCT.norm2 <- dCT.norm[order(featureNames(dCT.norm)),]
qDE.limma <- limmaCtData(dCT.norm2, design = design, contrasts = contrasts, ndups = 1, spacing = 1)
qDE.limma.fit <- limmaCtDataMod(dCT.norm2, design = design, contrasts = contrasts, ndups = 1, spacing = 1, ret.fit = FALSE, topTableOut = TRUE)
qDE.limma.tab <- qDE.limma.fit$`topTable`
qDE.limma.tab$genes <- rownames(qDE.limma.tab)
write.csv(qDE.limma.tab, "qDE.limma.tab.csv")
qDE.limma.tab[which(qDE.limma.tab$logFC > 0), ]
qDE.limma.tab[which(qDE.limma.tab$logFC >= 0), ]
qDE.limma.tab[which(qDE.limma.tab$logFC < 0), ]
write.csv(qDE.limma.tab[which(qDE.limma.tab$logFC < 0), ], file = "qDE.limma.tab.down.csv"
)
write.csv(qDE.limma.tab[which(qDE.limma.tab$logFC >= 0), ], file = "qDE.limma.tab.up.csv")
